#!groovy

// GIT config -------------------------------------------------------{
def gitRepo = 'https://tools.adidas-group.com/bitbucket/scm/gtt/gtt-b2cc-be.git'
//}
// Jenkins config ---------------------------------------------------{
def testNode = 'docker'
def testSet = 'B2CT-1'
def env='-Denv=sit'
def tags=['@token','@PCAPI_input_smoke_test']
def err
//}

def featureDir = 'src/test/resources/features/jenkins'
def credentials = 'service_account'
def branch = 'master'
def outputFile = "src/test/resources/features/jenkins/features.zip"


//Pipeline 
node(testNode) {
	try{
		currentBuild.result = 'SUCCESS'

		stage('Collect info') {
			deleteDir()

			final Map props = [
			$class                           : 'GitSCM',
			doGenerateSubmoduleConfigurations: false,
			extensions                       : [],
			submoduleCfg                     : [],
			userRemoteConfigs                : [[
												credentialsId: credentials,
												url          : repositoryUrl
			]]
			]

			 props.branches = [[name: branch]]

			 checkout props
		}

		stage('GET Xray') {
			def url = "https://tools.adidas-group.com/jira/rest/raven/1.0/export/test?keys=${testSet}"

			sh "rm ${args.featureDir}/*.feature"

			httpRequest authentication: credentials, outputFile: outputFile, responseHandle: 'NONE', url: url

			final isZip = sh(script: "unzip -t ${outputFile} >/dev/null 2>/dev/null", returnStatus: true)

			if (isZip == 0) {
				sh "unzip -o ${outputFile} -d ${featureDir}"
					sh "rm ${outputFile}"
			} else {
				sh "mv ${outputFile} ${featureDir}/0.feature"
			}
		}

		stage('Build') {
			sh "gradle clean testClasses"
		}

		stage('Test') {
			def aggregateFlags =  env
			def testFlags = " -x testClasses -x classes"
			def port = 4444
			def browser = "chrome"
			def remote = "http://deheremap7628:${port}/wd/hub"
			def labels = tags.join(",")
			labels = "--tags ${labels}"


			def cucumberOptions =  featureDir == "" ? labels : "${featureDir} ${labels}"
			if (cucumberOptions != "") {
				aggregateFlags += " -Dcucumber.options=\"${cucumberOptions}\""
			}
			testFlags += " -Dwebdriver.remote.driver=${browser} -Dwebdriver.remote.url=${remote}"

			try{
				sh "gradle  test ${testFlags} aggregate ${aggregateFlags}"
			}catch(e){
				currentBuild.result = 'FAILURE'
				echo "${e}"
			}
		}

		stage('POST Xray') {
			withCredentials([usernameColonPassword(credentialsId: 'service_account', variable: 'USERPASS')]) {
				def header ='-H "Content-Type: application/json" -H "Cache-Control: no-cache"'
				def url = 'https://tools.adidas-group.com/jira/rest/raven/1.0/import/execution/cucumber'
				def data = '@target/cucumber-report.json'
				sh "curl -X POST $url $header -u $USERPASS -d $data"
			}
		}

		stage('Publishing Results') {
			// Serenity
			def name = 'Serenity BDD Report'
			def dir = 'target/site/serenity'
			def files = 'index.html'

			publishHTML(target: [
					reportName: name,
					reportDir: dir,
					reportFiles: files,
					keepAll: true,
					alwaysLinkToLastBuild: true,
					allowMissing: false
			])
			// Cucumber
			def file = "cucumber-report.json"
			dir = "target"
			cucumber fileIncludePattern: file, jsonReportDirectory: dir, sortingMethod: 'ALPHABETICAL'
		}
	} catch(e){
		echo "Caught: ${e}"
			currentBuild.result = 'FAILURE'
	} finally {
		if (err) {
			currentBuild.result = 'UNSTABLE'
		}
	}
}
